[meta
  title:"The Beginner's Guide to Dimensionality Reduction"
  description:"Explore the methods that data scientists use to visualize high-dimensional data in this interactive article."
  shareImageUrl:"https://idyll.pub/post/dimensionality-reduction-293e465c2a3443e8941b016d/static/images/share.png"
  shareImageWidth:"1600"
  shareImageHeight:"800" /]


[data name:"images" source:"met-with-coordinates.csv"  /]
[var name:"scrollState" value:"loading" /]

[var name:"widthWeight" value:0 /]
[var name:"heightWeight" value:0 /]
[var name:"weightWeight" value:0 /]
[var name:"endDateWeight" value:0 /]
[var name:"brightnessWeight" value:1 /]
[var name:"showHilbert" value:false /]
[var name:"algorithm" value:"" /]
[var name:"selectedArtwork" value:`null ` /]

[Fixed]
  [DRComponent
    images:images
    state:scrollState
    showHilbert:showHilbert
    algorithm:algorithm
    selectedArtwork:selectedArtwork
    weights:`{
      // 'Width (cm)': widthWeight,
      // 'Height (cm)': heightWeight,
      'Object End Date': 1 - brightnessWeight,
      'brightness_avg_perceived': brightnessWeight
    }`
      /]

[/Fixed]

[Scroller currentState:scrollState]


  [Step state:"loading"]


    [Header
      title:"The Beginner's Guide to Dimensionality Reduction"
      subtitle:"Explore the methods that data scientists use to visualize high-dimensional data."
      date:"July 12, 2018"
      authors:`[
        { name: "Matthew Conlen", link: "https://twitter.com/mathisonian" },
        { name: "Fred Hohman", link: "https://twitter.com/fredhohman" }
      ]` /]

    [var name:"loadStatus" value:"initial" /]
    [StartButton state:scrollState status:loadStatus /]

    [Conditional if:`loadStatus === 'loaded'`]
      Dimensionality reduction is a powerful
      technique used by data scientists to look for hidden structure in data. The method
      is useful in a number of domains, for example document categorization, protein disorder prediction, and machine learning model debugging [Cite reference:"maaten2008visualizing"/].

      The results of a dimensionality reduction algorithm can be visualized to reveal patterns and clusters of similar or dissimilar data. Even though the data is displayed in only two or three dimensions, structures present in higher dimensions are maintained, at least roughly [Cite reference:"olah2014visualizing"/].

      The technique is available in many applications, for example Google's [Embedding Projector](https://projector.tensorflow.org/) [Display value:" "/] [Cite reference:"smilkov2016embedding"/] let's you view high-dimensional datasets embedded in two or three dimensions under a variety of different projections.

      // Dimensionality reduction algorithms work by inferring a function to describe the structure of *unlabeled* data, that is, data that has no preexisting categorization. Many of the commonly used algorithms produce complex embeddings and, since all considered data are unlabelled, it is difficult to evaluate the results of the structures produced by such algorithms.

      This guide will teach you how to think about these embeddings, and provide a comparison of some of the most popular dimensionality reduction algorithms used today.

    [/Conditional]

  [/Step]


  [Step state:"reveal"]

    # Art or science?

    Your browser has just loaded information about
    roughly 800 artworks from the collection at the [Metropolitan Museum of Art](https://www.metmuseum.org/). The museum has publicly released a large dataset about their collection [Cite reference:"met"/], we are displaying just a small fraction. They are positioned randomly.

    *Hover over an artwork to see its details.*

    [br/]

    Each artwork includes basic metadata, such as its title, artist, date made, medium, and dimensions.
    Data scientists like to call metadata for each data point (artwork) *features*.
    Below are 10 artworks from the dataset.

    [br/]

    [Table
      data:`images.slice(0, 10)`
      columns:`[
        { Header: 'Year', accessor: 'Object End Date' },
        { Header: 'Title',  accessor: 'Title'},
        { Header: 'Artist', accessor: 'Artist Display Name'}]` /]

    [br/]

  [/Step]


  [Step state:"1d"]

    # Projecting onto a line

    These features can be thought of as vectors existing in a high-dimensional space. We want to visualize the vectors, however we can't show all the dimensions at once.

    The answer is to project the data into a lower dimension, one that can be visualized. This kind of projection is called an *embedding*.

    // *Remember that points have 0 dimensions, lines are 1 dimensional, planes are 2 dimensional, etc.*
    // [br/]

    Computing 1-dimensional embedding requires taking each artwork and computing a single number to describe it.
    A benefit of reducing to 1D is that the numbers, and the artworks, can be sorted on a line.

    [Projection images:images src:"./static/images/projection.svg" /]

    On the right you see the artwork positioned according to their *average pixel brightness*. Notice that the images are sorted, with the darkest images appearing at the top and the brightest images on the bottom!
  [/Step]


  [Step state:"reset"]

    # For the mathematically inclined

    Dimensionality reduction can be formulated mathematically in the context of a given dataset. Consider a dataset represented as a matrix
    [Equation display:false]X[/Equation], where
    [Equation display:false]X[/Equation]
    is of size
    [Equation display:false]m \times n[/Equation], where
    [Equation display:false]m[/Equation] represents the number of rows of
    [Equation display:false]X[/Equation], and
    [Equation display:false]n[/Equation] representes the number of columns.

    Typically, the rows of the matrix are *data points* and the columns are *features*.
    Dimensionality reduction will reduce the number of features of each data point, turning
    [Equation display:false]X[/Equation] into a new matrix,
    [Equation display:false]X'[/Equation], of size
    [Equation display:false]m \times d[/Equation], where
    [Equation display:false]d < n[/Equation].
    For visualizations we typically set
    [Equation display:false]d[/Equation] to be 1, 2 or 3.

    Say [Equation display:false]m=n[/Equation], that is
    [Equation display:false]X[/Equation] is a square matrix.
    Performing dimensionality reduction on
    [Equation display:false]X[/Equation] and setting
    [Equation display:false]d=2[/Equation] will change it from a square matrix to a tall, rectangular matrix.

    [Equation display:true]
    X =
    \begin{bmatrix}
    x & x & x \\
    x & x & x \\
    x & x & x
    \end{bmatrix}
    \implies
    \begin{bmatrix}
    x' & x' \\
    x' & x' \\
    x' & x'
    \end{bmatrix}
    = X'
    [/Equation]

    // Here,
    // [Equation display:false]x[/Equation] and
    // [Equation display:false]x'[/Equation] just represent nonzero values of a matrix.

    Each data point only has two features now, i.e., each data point has been reduced from a 3 dimensional vector to a 2 dimensional vector.

  [/Step]


  [Step state:"hilbert-brightness"]

    # Embedding data in two dimensions

    The same brightness feature can be used to position the artworks in 2D space instead of 1D.
    The pieces have more room to spread out.

    On the right you see a simple 2-dimensional embedding based on image brightness,
    but this isn't the only way to position the artworks.
    In fact, there are many, and some projections are more useful than others.

    *Use the slider to vary the influence that the brightness and artwork age have in determining the embedding positions.*

    As you move the slider from brightness to artwork age, the embedding changes from highlighting bright and dark images,
    and starts to cluster recent modern-day images in the bottom left corner whereas older artworks are moved farther away (*hover over images to see their date*).


    [div style:`{display: 'flex', flexAlign: 'row', textAlign: 'center'}`]

      [div style:`{margin: '0 auto'}`]
      *Artwork Age*
      [Range value:brightnessWeight min:0 max:1 step:0.005 /]
      *Brightness*
      [/div]

    [/div]

    [var name:"showHilbertDetails" value:false /]

    [conditional if:`!showHilbertDetails ` ]
      [button onClick:` showHilbertDetails = true; showHilbert = true; ` ]
        Show technical details
      [/button]
    [/conditional]

    [conditional if:showHilbertDetails ]

    The embedding you see here is actually a linear 1D embedding, whose resulting scalar is then
    mapped on a space-filling Hilbert curve [Cite reference:"hilbert1890stetige"/] to give the illusion of a 2D embedding,
    since space-filling curves preserve locality fairly well [Cite reference:"moon2001analysis"/]

    Each artwork's 1D reduced projection is computed by a linear combination of the three features above.

    Let [Equation display:false]a[/Equation] be a given artwork, and let each slider's value be a weight
    [Equation display:false]w_{i}[/Equation].
    We will compute
    [Equation display:false]a'[/Equation], the scalar projection of
    [Equation display:false]a[/Equation] into
    [Equation display:false]\mathbb{R}[/Equation].

    [Equation display:true]
    a' = (a_{\text{brightness}} \times w_{\text{brightness}}) + (a_{\text{age}} \times w_{\text{age}})
    [/Equation]

    Each artwork's final position is randomly jittered to prevent excessive overlap.

    [button onClick:`showHilbert = false; showHilbertDetails = false; `]Hide technical details[/button]

    [/conditional]
  [/Step]

  [Step state:"algorithms"]

    # Real-world algorithms



    We just showed an example of a user-driven embedding, where the exact influence of each feature is known in the embedding.
    However, you may have noticed that it's hard to find meaningful combinations of feature weights.


    State-of-the-art algorithms can find an optimal combination of features so that distances in
    the high dimensional space are preserved in the embedding. Use the tool below to project the artworks using three commonly used algorithms.


    In this example we are performing reduction on the pixels of each image: each image is flattened into a single vector, where each pixel represents one feature.
    We then reduce these vectors to two dimensions.

    [div className:"panel" ]

    [div style:`{display: 'flex', flexAlign: 'row', textAlign: 'center'}`]

      [button className:`(!algorithm || algorithm === 'pca')  ? 'selected' : ''` onClick:`algorithm = "pca" `]
        PCA
      [/button]

      [button className:`algorithm === 'mctsne' ? 'selected' : ''` onClick:`algorithm = "mctsne" `]
        t-SNE
      [/button]

      [button className:`algorithm === 'umap' ? 'selected' : ''` onClick:`algorithm = "umap" `]
        UMAP
      [/button]
    [/div]

    [conditional if:`!algorithm || algorithm === 'pca' ` ]
      ## Principal component analysis

      Pros:
* Relatively computationally cheap.
* Can save embedding model to then project new data points into the reduced space.

      Cons:
* Linear reduction limits information that can be captured; not as discriminably clustered as other algorithms.

    [/conditional]
    [conditional if:`algorithm === 'mctsne' ` ]
      ## t-Distributed stochastic neighbor embedding

      Pros:
* Produces highly clustered, visually striking embeddings.
* Non-linear reduction, captures local structure well.

      Cons:
* Global structure may be lost in favor of preserving local distances.
* More computationally expensive.
* Requires setting hyperparameters that influence quality of the embedding.
* Non-deterministic algorithm.

    [/conditional]
    [conditional if:`algorithm === 'umap' ` ]
      ## Uniform manifold approximation and projection

      Pros:
* Non-linear reduction that is computationally faster than t-SNE.
* User defined parameter for preserving local or global structure.
* Solid theoretical foundations in manifold learning.

      Cons:
* New, less prevalent algorithm.
* Requires setting hyperparameters that influence quality of the embedding.
* Non-deterministic algorithm.

    [/conditional]
[/div]


    There are many algorithms that compute a dimensionality reduction of a dataset.
    Simpler algorithms such as principal component analysis (PCA) maximize the variance in the data to produce the best possible embedding.
    More complicated algorithms, such as t-distributed stochastic neighbor embedding (t-SNE) [Cite reference:"maaten2008visualizing"/],
    iteratively produce highly clustered embeddings.
    Unfortunately, whereas before the influence of each feature was explicitly known,
    one must relinquish control to the algorithm to determine the best embedding—
    that means that it is not clear what features of the data are used to compute the embedding.
    This can be problematic for misinterpreting what an embedding is showing [Cite reference:"wattenberg2016how"/].

    Dimensionality reduction, and more broadly the field of unsupervised learning, is an active area of research where researchers are
    developing new techniques to create better embeddings.
    A new technique, uniform manifold approximation and projection (UMAP) [Cite reference:"mcinnes2018umap"/],
    is a non-linear reduction that aims to create visually striking embeddings fast, scaling to larger datasets.


  [/Step]

  [Step]
    # Try it for yourself

    Dimensionality reduction is a powerful tool to better understand high-dimensional data.
    If you have your own dataset and wish to visualize it using dimensionality reduction, there are a number of different algorithms [Cite reference:"van2009dimensionality"/] and
    implementations available.
    In Python, the scikit-learn package [Cite reference:`["scikit-learn", "sklearn_api"]`/] provides APIs for many
    [unsupervised dimensionality reduction](http://scikit-learn.org/stable/modules/unsupervised_reduction.html) algorithms,
    as well as [manifold learning](http://scikit-learn.org/stable/modules/manifold.html): an approach to non-linear dimensionality reduction.

    Regarding the three algorithms discussed above, you can find Python implementations of the algorithms we used for the artworks here:
    [PCA](http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html),
    [t-SNE](http://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html) [Display value:" "/] [Cite reference:"maaten2008visualizing"/],
    and [UMAP](https://github.com/lmcinnes/umap) [Display value:" "/] [Cite reference:"mcinnes2018umap"/].

    ### Acknowledgments
* This article was created using [Idyll](https://idyll-lang.org).
* The source code is available on [Github](https://github.com/mathisonian/dimensionality-reduction).

    [References /]

  [/Step]

[/Scroller]



[ArtworkDetails artwork:selectedArtwork /]


[analytics google:"UA-108267630-1" tag:"dimensionality-reduction" /]